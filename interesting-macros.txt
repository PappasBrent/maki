evaluation/extracted_programs/lua-5.4.4/src/llimits.h:123
types as first-class citizens
program-altering
need to either add a function that emulates support for types as first class citizens, or convert the program to C++ and use template functions





evaluation/extracted_programs/gnuplot-5.4.4/src/axis.h:35
argument axis is of typedef'd type AXIS, defined on line 183, after the macro itself is defined




evaluation/extracted_programs/gzip-1.12/inflate.c:224
fairly simple unhygienic macro
callsite-altering (actually declaration-altering)
have to make add b and k to parameters list and turn them into pointers so that changes will be applied to b and k in caller's environment
also have to make b and k not register variables in order to take its address... so maybe this is really declaration altering?
we don't currently check for register types though, so we would erroneously report this as callsite-altering :(


/home/bpappas/macro-analyzer/evaluation/extracted_programs/rcs-5.10.0/src/b-grok.c:610:7
callsite-altering
have to add captured variables "tp" and "to" to the parameters list, and turn tp into a pointer so that changes will be applied to tp in the caller's environment.



evaluation/extracted_programs/lua-5.4.4/src/ltable.h:14
interface-equivalent
returns address of the argument n's i_val field
accepts a single argument n of type Node *

#define gval(n)		(&(n)->i_val)
...
typedef union Node {
    ...
    TValue i_val;
} Node;
...
Node *n = mainpositionTV(t, key);
...
return gval(n);


Transform to:
static inline TValue *gval(Node *n) { return (&(n)->i_val); }



/home/bpappas/macro-analyzer/evaluation/extracted_programs/bash-5.2-rc1/subst.c:12143:9
decent example of a callsite-altering macro
have to change elist type to pointer to ensure side-effects effect elist from caller's environment



evaluation/extracted_programs/bash-5.2-rc1/y.tab.c:1723
callsite-altering
add captured vars to type signature and change them to pointers to persist side-effects